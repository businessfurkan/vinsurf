import React, { useState, useEffect, useCallback } from 'react';
import { useAuthState } from 'react-firebase-hooks/auth';
import { auth } from '../firebase';
import { motion } from 'framer-motion';
import '../styles/tyt-ayt-modern.css';
import ModernStepper from '../components/ModernStepper';
import { styled } from '@mui/system';
import { useNotifications } from '../context/NotificationContext';
import { 
  LineChart, 
  Line, 
  XAxis, 
  YAxis, 
  CartesianGrid, 
  Tooltip, 
  Legend, 
  ResponsiveContainer,
  AreaChart,
  Area,
  BarChart,
  Bar,
  PieChart,
  Pie,
  Cell
} from 'recharts';
import { 
  Box, 
  Typography, 
  TextField, 
  Button,
  FormControl,
  InputLabel,
  Select,
  MenuItem,
  Card,
  CardContent,
  Grid,
  Paper,
  IconButton,
  Table,
  TableBody,
  TableCell,
  TableContainer,
  TableHead,
  TableRow,
  Snackbar,
  Alert,
  CircularProgress,
  Container,
  Divider,
  useTheme,
  useMediaQuery,
  Chip,
  Avatar,
  Tabs,
  Tab,
  Badge,
  Tooltip as MuiTooltip,
  Stack
} from '@mui/material';
import { AdapterDateFns } from '@mui/x-date-pickers/AdapterDateFns';
import { LocalizationProvider } from '@mui/x-date-pickers/LocalizationProvider';
import { DatePicker } from '@mui/x-date-pickers/DatePicker';
import trLocale from 'date-fns/locale/tr';
import { format } from 'date-fns';
import {
  School as SchoolIcon,
  Add as AddIcon,
  Delete as DeleteIcon,
  NavigateNext as NavigateNextIcon,
  NavigateBefore as NavigateBeforeIcon,
  CheckCircle as CheckCircleIcon,
  BarChart as BarChartIcon,
  ViewList as ViewListIcon,
  Edit as EditIcon,
  Timeline as TimelineIcon,
  Equalizer as EqualizerIcon,
  TrendingUp as TrendingUpIcon,
  Assignment as AssignmentIcon,
  CalendarToday as CalendarTodayIcon,
  Category as CategoryIcon,
  MenuBook as MenuBookIcon,
  Summarize as SummarizeIcon,
  Info as InfoIcon,
  Lightbulb as LightbulbIcon
} from '@mui/icons-material';

import { db } from '../firebase';
import { 
  collection, 
  query, 
  getDocs, 
  where,
  orderBy, 
  deleteDoc, 
  doc,
  addDoc,
  serverTimestamp
} from 'firebase/firestore';

// Define TYT ve AYT subjects
const tytSubjects = [
  'TYT Türkçe',
  'TYT Sosyal',
  'TYT Matematik',
  'TYT Fen Bilimleri'
];

const aytSubjects = [
  'AYT Matematik',
  'AYT Fizik',
  'AYT Kimya',
  'AYT Biyoloji',
  'AYT Edebiyat',
  'AYT Tarih',
  'AYT Coğrafya'
];

// Styled components
const StyledCard = styled(Card)(({ theme }) => ({
  borderRadius: 'var(--border-radius)',
  background: 'linear-gradient(145deg, #ffffff 0%, #f8f9fa 100%)',
  boxShadow: 'var(--box-shadow)',
  border: '1px solid rgba(0, 0, 0, 0.05)',
  transition: 'var(--transition)',
  overflow: 'hidden',
  position: 'relative',
  width: '100%',
  '&:hover': {
    transform: 'translateY(-5px)',
    boxShadow: '0 15px 35px rgba(0, 0, 0, 0.1)'
  }
}));

const GradientCard = styled(Card)(({ theme, color = 'primary' }) => {
  const colors = {
    primary: 'linear-gradient(45deg, var(--primary-color), var(--primary-light))',
    secondary: 'linear-gradient(45deg, var(--secondary-color), var(--secondary-light))',
    success: 'linear-gradient(45deg, var(--success-color), #6deca9)',
    info: 'linear-gradient(45deg, var(--info-color), #5dade2)',
    warning: 'linear-gradient(45deg, var(--warning-color), #f5b041)',
    danger: 'linear-gradient(45deg, var(--danger-color), #ec7063)'
  };
  
  return {
    borderRadius: 'var(--border-radius)',
    background: colors[color] || colors.primary,
    color: 'white',
    boxShadow: 'var(--box-shadow)',
    transition: 'var(--transition)',
    overflow: 'hidden',
    position: 'relative',
    '&:hover': {
      transform: 'translateY(-5px)',
      boxShadow: '0 15px 35px rgba(0, 0, 0, 0.15)'
    }
  };
});

const StyledTextField = styled(TextField)(({ theme }) => ({
  '& .MuiOutlinedInput-root': {
    borderRadius: '12px',
    transition: 'var(--transition)',
    '&:hover .MuiOutlinedInput-notchedOutline': {
      borderColor: 'var(--primary-color)'
    },
    '&.Mui-focused .MuiOutlinedInput-notchedOutline': {
      borderColor: 'var(--primary-color)',
      borderWidth: '2px'
    }
  },
  '& .MuiInputLabel-outlined.Mui-focused': {
    color: 'var(--primary-color)'
  }
}));

const StyledButton = styled(Button)(({ theme, variant }) => ({
  borderRadius: '30px',
  padding: '10px 24px',
  fontWeight: 600,
  textTransform: 'none',
  letterSpacing: '0.5px',
  transition: 'all 0.3s ease',
  position: 'relative',
  overflow: 'hidden',
  ...(variant === 'contained' && {
    background: 'linear-gradient(45deg, var(--primary-color), var(--primary-light))',
    color: 'white',
    border: 'none',
    '&:hover': {
      background: 'linear-gradient(45deg, var(--primary-dark), var(--primary-color))',
      boxShadow: '0 4px 15px rgba(74, 108, 247, 0.4)'
    }
  }),
  ...(variant === 'outlined' && {
    background: 'transparent',
    color: 'var(--primary-color)',
    border: '2px solid var(--primary-color)',
    '&:hover': {
      background: 'rgba(74, 108, 247, 0.1)'
    }
  })
}));

// Steps for the form
const steps = [
  '1. Deneme Adı',
  '2. Tarih',
  '3. Sınav Türü',
  '4. Ders Bilgileri',
  '5. Özet'
];

const TytAytNetTakibi = () => {
  const theme = useTheme();
  const isMobile = useMediaQuery(theme.breakpoints.down('sm'));
  
  // Get user from firebase auth
  const [user] = useAuthState(auth);
  
  // State for the multi-step form
  const [activeStep, setActiveStep] = useState(0);
  const [examName, setExamName] = useState('');
  const [examDate, setExamDate] = useState(new Date());
  const [examType, setExamType] = useState('TYT');
  const [subjectData, setSubjectData] = useState({});
  const [currentSubject, setCurrentSubject] = useState('');
  const [correctCount, setCorrectCount] = useState('');
  const [incorrectCount, setIncorrectCount] = useState('');
  const [emptyCount, setEmptyCount] = useState('');
  const [errors, setErrors] = useState({});
  
  // State for the application
  const [netRecords, setNetRecords] = useState([]);
  const [loading, setLoading] = useState(false);
  const [notification, setNotification] = useState({ open: false, message: '', severity: 'success' });
  const [viewMode, setViewMode] = useState('form'); // 'form' or 'records'
  const [selectedExamType, setSelectedExamType] = useState('TYT');
  const [selectedSubject, setSelectedSubject] = useState('');
  const [tabValue, setTabValue] = useState(0); // 0: form, 1: records, 2: statistics
  
  // Bildirim sistemi için context
  const { addNotification } = useNotifications();
  
  // Helper functions
  const calculateNet = (correct, incorrect) => {
    const correctNum = parseFloat(correct) || 0;
    const incorrectNum = parseFloat(incorrect) || 0;
    return (correctNum - (incorrectNum * 0.25)).toFixed(2);
  };

  // Close notification
  const handleCloseNotification = () => {
    setNotification({...notification, open: false});
  };

  // Show notification
  const showNotification = useCallback((message, severity = 'success') => {
    setNotification({
      open: true,
      message,
      severity
    });
  }, [setNotification]);
  
  // Handle next step in the form
  const handleNext = () => {
    let isValid = true;
    const newErrors = {};
    
    // Validate current step
    if (activeStep === 0) {
      if (!examName.trim()) {
        newErrors.examName = 'Deneme adı gereklidir';
        isValid = false;
      }
    } else if (activeStep === 1) {
      // Date validation is handled by the DatePicker component
    } else if (activeStep === 2) {
      // Exam type validation is handled by the Select component
    } else if (activeStep === 3) {
      if (Object.keys(subjectData).length === 0) {
        setNotification({
          open: true,
          message: 'En az bir ders eklemelisiniz',
          severity: 'error'
        });
        isValid = false;
      }
    }
    
    setErrors(newErrors);
    
    if (!isValid) {
      return;
    }
    // If we're on the subject selection step and a subject is selected
    if (activeStep === 3 && currentSubject) {
      // Save current subject data
      const updatedSubjectData = {
        ...subjectData,
        [currentSubject]: {
          correctCount: parseInt(correctCount) || 0,
          incorrectCount: parseInt(incorrectCount) || 0,
          emptyCount: parseInt(emptyCount) || 0,
          net: calculateNet(correctCount, incorrectCount)
        }
      };
      setSubjectData(updatedSubjectData);
      
      // Clear form for next subject
      setCurrentSubject('');
      setCorrectCount('');
      setIncorrectCount('');
      setEmptyCount('');
      return;
    }
    
    // Move to next step
    setActiveStep((prevStep) => prevStep + 1);
  };
  
  // Handle back step in the form
  const handleBack = () => {
    setActiveStep((prevStep) => prevStep - 1);
  };
  
  // Handle selecting a subject
  const handleSubjectSelect = (subject) => {
    setCurrentSubject(subject);
    
    // If we already have data for this subject, populate the form
    if (subjectData[subject]) {
      const data = subjectData[subject];
      setCorrectCount(data.correctCount.toString());
      setIncorrectCount(data.incorrectCount.toString());
      setEmptyCount(data.emptyCount.toString());
    } else {
      // Otherwise clear the form
      setCorrectCount('');
      setIncorrectCount('');
      setEmptyCount('');
    }
  };
  
  // Fetch records from Firestore
  const fetchRecords = useCallback(async () => {
    if (!user) return;
    
    try {
      setLoading(true);
      const q = query(
        collection(db, 'netRecords'),
        where('userId', '==', user.uid),
        orderBy('createdAt', 'desc')
      );
      
      const querySnapshot = await getDocs(q);
      const records = [];
      
      querySnapshot.forEach((doc) => {
        records.push({
          id: doc.id,
          ...doc.data()
        });
      });
      
      setNetRecords(records);
    } catch (error) {
      console.error('Error fetching records:', error);
      setNotification({
        open: true,
        message: 'Kayıtlar yüklenirken bir hata oluştu',
        severity: 'error'
      });
    } finally {
      setLoading(false);
    }
  }, [user]);
  
  // Tavsiye gönderme fonksiyonu
  const sendRecommendation = useCallback((subject, decreasePercentage) => {
    // Ders adından konu tahmini yap
    let topic = '';
    let resources = [];
    
    // Derse göre konu ve kaynak önerileri
    if (subject.includes('Matematik')) {
      topic = 'problemler';
      resources = ['Matematik Problemi Çözme Teknikleri', 'Problem Çözüm Stratejileri', 'Matematik Problem Bankası'];
    } else if (subject.includes('Türkçe')) {
      topic = 'paragraf soruları';
      resources = ['Paragraf Çözüm Teknikleri', 'TYT Türkçe Soru Bankası', 'Dil Bilgisi Konu Anlatımı'];
    } else if (subject.includes('Fizik')) {
      topic = 'hareket problemleri';
      resources = ['Fizik Formül Kartları', 'Fizik Soru Bankası', 'Konu Anlatımlı Fizik'];
    } else if (subject.includes('Kimya')) {
      topic = 'kimyasal tepkimeler';
      resources = ['Kimya Reaksiyon Kartları', 'Kimya Soru Bankası', 'Organik Kimya Konu Anlatımı'];
    } else if (subject.includes('Biyoloji')) {
      topic = 'hücre konusu';
      resources = ['Biyoloji Hücre Atlası', 'Biyoloji Soru Bankası', 'Genetik Konu Anlatımı'];
    } else if (subject.includes('Tarih')) {
      topic = 'tarih kronolojisi';
      resources = ['Tarih Kronoloji Kartları', 'Tarih Soru Bankası', 'Osmanlı Tarihi Konu Anlatımı'];
    } else if (subject.includes('Coğrafya')) {
      topic = 'harita bilgisi';
      resources = ['Coğrafya Atlas Çalışması', 'Coğrafya Soru Bankası', 'Türkiye Coğrafyası Konu Anlatımı'];
    } else if (subject.includes('Edebiyat')) {
      topic = 'edebi akımlar';
      resources = ['Edebiyat Akımları Özeti', 'Edebiyat Soru Bankası', 'Divan Edebiyatı Konu Anlatımı'];
    } else if (subject.includes('Sosyal')) {
      topic = 'vatandaşlık konuları';
      resources = ['Vatandaşlık Konu Özeti', 'TYT Sosyal Bilimler Soru Bankası', 'Güncel Bilgiler'];
    } else if (subject.includes('Fen')) {
      topic = 'deney soruları';
      resources = ['Fen Bilimleri Deney Kitabı', 'TYT Fen Bilimleri Soru Bankası', 'Fen Konu Anlatımı'];
    } else {
      topic = 'genel konular';
      resources = ['Konu Tekrar Kitabı', 'Soru Bankası', 'Online Eğitim Platformları'];
    }
    
    // Düşüş yüzdesine göre mesaj şiddetini ayarla
    let severity = 'info';
    if (decreasePercentage > 30) {
      severity = 'warning';
    }
    
    // Tavsiye mesajını oluştur
    const message = `Son 3 denemeye göre ${subject} dersinde ${topic} kısmında zorlanıyorsun. Sana şu kaynakları öneriyorum: ${resources.join(', ')}.`;
    
    // Bildirim gönder
    addNotification(message, severity, {
      title: 'Yapay Zeka Tavsiye Sistemi',
      subject: subject,
      resources: resources,
      decreasePercentage: decreasePercentage.toFixed(1)
    });
    
  }, [addNotification]);
  
  // Yapay zeka tavsiye sistemi
  const analyzePerformanceAndSendRecommendations = useCallback((records) => {
    if (!records || records.length < 3) return; // En az 3 deneme olmalı
    
    try {
      // TYT ve AYT derslerini birleştir
      const allSubjects = [...tytSubjects, ...aytSubjects];
      
      // Her ders için son 3 denemeyi analiz et
      allSubjects.forEach(subject => {
        // Bu derse ait son 3 denemeyi bul
        const subjectRecords = records
          .filter(record => record.subject === subject)
          .sort((a, b) => {
            const dateA = a.createdAt?.toDate ? a.createdAt.toDate() : new Date(a.createdAt?.seconds * 1000 || 0);
            const dateB = b.createdAt?.toDate ? b.createdAt.toDate() : new Date(b.createdAt?.seconds * 1000 || 0);
            return dateB - dateA; // Tarihe göre azalan sıralama (en yeniden en eskiye)
          })
          .slice(0, 3); // Son 3 deneme
        
        // En az 3 deneme yoksa analiz yapma
        if (subjectRecords.length < 3) return;
        
        // Net puanları al
        const nets = subjectRecords.map(record => parseFloat(record.net) || 0);
        
        // Son 3 denemede düşüş var mı kontrol et
        // En yeni deneme en eskisinden düşükse ve bir trend varsa
        if (nets[0] < nets[2] && nets[0] < nets[1]) {
          // Düşüş yüzdesini hesapla
          const decreasePercentage = ((nets[2] - nets[0]) / nets[2]) * 100;
          
          // Eğer düşüş %10'dan fazlaysa tavsiye gönder
          if (decreasePercentage > 10) {
            sendRecommendation(subject, decreasePercentage);
          }
        }
      });
    } catch (error) {
      console.error('Performans analizi sırasında hata:', error);
    }
  }, [sendRecommendation]);

  useEffect(() => {
    if (netRecords.length > 0) {
      analyzePerformanceAndSendRecommendations(netRecords);
    }
  }, [netRecords, analyzePerformanceAndSendRecommendations]);

  // Fetch all records
  const fetchNetRecords = useCallback(async () => {
    try {
      setLoading(true);
      
      // Kullanıcı oturum açmamışsa işlemi durdur
      if (!user || !user.uid) {
        console.log('Kullanıcı oturum açmamış, veriler yüklenemiyor');
        return;
      }
      
      const q = query(
        collection(db, 'netRecords'),
        where('userId', '==', user.uid),
        orderBy('createdAt', 'desc')
      );
      
      const querySnapshot = await getDocs(q);
      const records = [];
      
      querySnapshot.forEach((doc) => {
        records.push({
          id: doc.id,
          ...doc.data()
        });
      });
      
      setNetRecords(records);
      
      // Yapay zeka tavsiye sistemini çalıştır
      if (records.length > 0) {
        analyzePerformanceAndSendRecommendations(records);
      }
      
    } catch (error) {
      console.error('Error fetching records:', error);
      showNotification('Kayıtlar yüklenirken bir hata oluştu', 'error');
    } finally {
      setLoading(false);
    }
  }, [showNotification, setLoading, setNetRecords, analyzePerformanceAndSendRecommendations, user]);
  

  
  // Delete a record
  const handleDelete = async (id) => {
    try {
      setLoading(true);
      
      await deleteDoc(doc(db, 'netRecords', id));
      
      // Update local state
      setNetRecords(netRecords.filter(record => record.id !== id));
      
      showNotification('Kayıt başarıyla silindi', 'success');
    } catch (error) {
      console.error('Error deleting record:', error);
      showNotification('Silme işlemi sırasında bir hata oluştu', 'error');
  };
  
  // Fetch records on component mount
  useEffect(() => {
    if (user) {
      fetchNetRecords();
    }
  }, [user, fetchNetRecords]);
  
  // Render form step content
  const getStepContent = (step) => {
    switch (step) {
      case 0:
        return (
          <Box sx={{ p: 3 }}>
            <Typography variant="h6" gutterBottom sx={{ color: '#f4f2f5' }}>
              Deneme Adını Girin
            </Typography>
            <TextField
              fullWidth
              label="Deneme Adı"
              variant="outlined"
              value={examName}
              onChange={(e) => setExamName(e.target.value)}
              error={!!errors.examName}
              helperText={errors.examName}
              sx={{
                '& .MuiOutlinedInput-root': {
                  backgroundColor: 'rgba(44, 62, 80, 0.6)',
                  color: '#ffffff',
                  '& fieldset': {
                    borderColor: 'rgba(255, 255, 255, 0.5)'
                  },
                  '&:hover fieldset': {
                    borderColor: '#ffffff'
                  },
                  '&.Mui-focused fieldset': {
                    borderColor: '#ffffff'
                  }
                },
                '& .MuiInputLabel-root': {
                  color: '#ffffff'
                },
                '& .MuiInputLabel-root.Mui-focused': {
                  color: '#ffffff'
                },
                '& .MuiInputBase-input': {
                  color: '#ffffff'
                },
                '& .MuiFormHelperText-root': {
                  color: '#ffffff'
                }
              }}
            />
          </Box>
        );
      case 1:
        return (
          <Box sx={{ p: 3 }}>
            <Typography variant="h6" gutterBottom sx={{ color: '#f4f2f5' }}>
              Deneme Tarihini Seçin
            </Typography>
            <LocalizationProvider dateAdapter={AdapterDateFns} adapterLocale={trLocale}>
              <DatePicker
                label="Deneme Tarihi"
                value={examDate}
                onChange={(newDate) => setExamDate(newDate)}
                slotProps={{
                  textField: {
                    fullWidth: true,
                    error: !!errors.examDate,
                    helperText: errors.examDate,
                    sx: { 
                      mt: 2,
                      '& .MuiOutlinedInput-root': {
                        backgroundColor: 'rgba(44, 62, 80, 0.6)',
                        color: '#ffffff',
                        '& fieldset': {
                          borderColor: 'rgba(255, 255, 255, 0.5)'
                        },
                        '&:hover fieldset': {
                          borderColor: '#ffffff'
                        },
                        '&.Mui-focused fieldset': {
                          borderColor: '#ffffff'
                        }
                      },
                      '& .MuiInputLabel-root': {
                        color: '#ffffff'
                      },
                      '& .MuiInputBase-input': {
                        color: '#ffffff'
                      },
                      '& .MuiFormHelperText-root': {
                        color: '#ffffff'
                      }
                    }
                  }
                }}
              />
            </LocalizationProvider>
          </Box>
        );
      case 2:
        return (
          <Box sx={{ p: 3 }}>
            <Typography variant="h6" gutterBottom sx={{ color: '#f4f2f5' }}>
              Sınav Türünü Seçin
            </Typography>
            <FormControl fullWidth sx={{ mt: 2 }}>
              <InputLabel sx={{ color: '#f4f2f5' }}>Sınav Türü</InputLabel>
              <Select
                value={examType}
                label="Sınav Türü"
                onChange={(e) => setExamType(e.target.value)}
                sx={{
                  backgroundColor: 'rgba(44, 62, 80, 0.6)',
                  color: '#ffffff',
                  '& .MuiOutlinedInput-notchedOutline': {
                    borderColor: 'rgba(255, 255, 255, 0.5)'
                  },
                  '&:hover .MuiOutlinedInput-notchedOutline': {
                    borderColor: '#ffffff'
                  },
                  '&.Mui-focused .MuiOutlinedInput-notchedOutline': {
                    borderColor: '#ffffff'
                  }
                }}
              >
                <MenuItem value="TYT" sx={{ backgroundColor: 'rgba(44, 62, 80, 0.8)', color: '#ffffff', '&:hover': { backgroundColor: 'rgba(44, 62, 80, 0.9)' }, '&.Mui-selected': { backgroundColor: 'rgba(44, 62, 80, 0.9)' } }}>TYT</MenuItem>
                <MenuItem value="AYT" sx={{ backgroundColor: 'rgba(44, 62, 80, 0.8)', color: '#ffffff', '&:hover': { backgroundColor: 'rgba(44, 62, 80, 0.9)' }, '&.Mui-selected': { backgroundColor: 'rgba(44, 62, 80, 0.9)' } }}>AYT</MenuItem>
              </Select>
            </FormControl>
          </Box>
        );
      case 3:
        return (
          <Box sx={{ p: 3 }}>
            <Typography variant="h6" gutterBottom sx={{ color: '#f4f2f5' }}>
              Ders Bilgilerini Girin
            </Typography>
            
            <Grid container spacing={2} sx={{ mt: 1 }}>
              <Grid item xs={12} md={6}>
                <FormControl fullWidth>
                  <InputLabel sx={{ color: '#f4f2f5' }}>Ders Seçin</InputLabel>
                  <Select
                    value={currentSubject}
                    label="Ders Seçin"
                    onChange={(e) => handleSubjectSelect(e.target.value)}
                    sx={{
                      '& .MuiOutlinedInput-notchedOutline': {
                        borderColor: 'rgba(255, 255, 255, 0.5)'
                      },
                      '&:hover .MuiOutlinedInput-notchedOutline': {
                        borderColor: '#ffffff'
                      },
                      '&.Mui-focused .MuiOutlinedInput-notchedOutline': {
                        borderColor: '#ffffff'
                      },
                      color: '#ffffff',
                      height: '56px',
                      fontSize: '1.1rem',
                      backgroundColor: 'rgba(44, 62, 80, 0.6)',
                      minWidth: '300px',
                      '& .MuiSelect-select': {
                        paddingTop: '12px',
                        paddingBottom: '12px',
                        width: '100%'
                      }
                    }}
                  >
                    {(examType === 'TYT' ? tytSubjects : aytSubjects).map((subject) => (
                      <MenuItem key={subject} value={subject}>
                        {subject}
                      </MenuItem>
                    ))}
                  </Select>
                </FormControl>
              </Grid>
              
              {currentSubject && (
                <>
                  <Grid gridColumn={{xs: "span 12", sm: "span 4"}}>
                    <TextField
                      fullWidth
                      label="Doğru"
                      type="number"
                      InputProps={{ 
                        inputProps: { min: 0 },
                        sx: { color: '#f4f2f5' }
                      }}
                      value={correctCount}
                      onChange={(e) => setCorrectCount(e.target.value)}
                      error={!!errors.correctCount}
                      helperText={errors.correctCount}
                      sx={{
                        '& .MuiOutlinedInput-root': {
                          backgroundColor: 'rgba(44, 62, 80, 0.6)',
                          color: '#ffffff',
                          '& fieldset': {
                            borderColor: 'rgba(255, 255, 255, 0.5)'
                          },
                          '&:hover fieldset': {
                            borderColor: '#ffffff'
                          },
                          '&.Mui-focused fieldset': {
                            borderColor: '#ffffff'
                          }
                        },
                        '& .MuiInputLabel-root': {
                          color: '#ffffff'
                        },
                        '& .MuiInputLabel-root.Mui-focused': {
                          color: '#ffffff'
                        },
                        '& .MuiInputBase-input': {
                          color: '#ffffff'
                        },
                        '& .MuiFormHelperText-root': {
                          color: '#ffffff'
                        }
                      }}
                    />
                  </Grid>
                  <Grid gridColumn={{xs: "span 12", sm: "span 4"}}>
                    <TextField
                      fullWidth
                      label="Yanlış"
                      type="number"
                      InputProps={{ 
                        inputProps: { min: 0 },
                        sx: { color: '#f4f2f5' }
                      }}
                      value={incorrectCount}
                      onChange={(e) => setIncorrectCount(e.target.value)}
                      error={!!errors.incorrectCount}
                      helperText={errors.incorrectCount}
                      sx={{
                        '& .MuiOutlinedInput-root': {
                          backgroundColor: 'rgba(44, 62, 80, 0.6)',
                          color: '#ffffff',
                          '& fieldset': {
                            borderColor: 'rgba(255, 255, 255, 0.5)'
                          },
                          '&:hover fieldset': {
                            borderColor: '#ffffff'
                          },
                          '&.Mui-focused fieldset': {
                            borderColor: '#ffffff'
                          }
                        },
                        '& .MuiInputLabel-root': {
                          color: '#ffffff'
                        },
                        '& .MuiInputLabel-root.Mui-focused': {
                          color: '#ffffff'
                        },
                        '& .MuiInputBase-input': {
                          color: '#ffffff'
                        },
                        '& .MuiFormHelperText-root': {
                          color: '#ffffff'
                        }
                      }}
                    />
                  </Grid>
                  <Grid gridColumn={{xs: "span 12", sm: "span 4"}}>
                    <TextField
                      fullWidth
                      label="Boş"
                      type="number"
                      InputProps={{ 
                        inputProps: { min: 0 },
                        sx: { color: '#f4f2f5' }
                      }}
                      value={emptyCount}
                      onChange={(e) => setEmptyCount(e.target.value)}
                      error={!!errors.emptyCount}
                      helperText={errors.emptyCount}
                      sx={{
                        '& .MuiOutlinedInput-root': {
                          backgroundColor: 'rgba(44, 62, 80, 0.6)',
                          color: '#ffffff',
                          '& fieldset': {
                            borderColor: 'rgba(255, 255, 255, 0.5)'
                          },
                          '&:hover fieldset': {
                            borderColor: '#ffffff'
                          },
                          '&.Mui-focused fieldset': {
                            borderColor: '#ffffff'
                          }
                        },
                        '& .MuiInputLabel-root': {
                          color: '#ffffff'
                        },
                        '& .MuiInputLabel-root.Mui-focused': {
                          color: '#ffffff'
                        },
                        '& .MuiInputBase-input': {
                          color: '#ffffff'
                        },
                        '& .MuiFormHelperText-root': {
                          color: '#ffffff'
                        }
                      }}
                    />
                  </Grid>
                  <Grid gridColumn="span 12">
                    <Button
                      variant="contained"
                      onClick={handleNext}
                      startIcon={<AddIcon sx={{ color: '#f4f2f5' }} />}
                      sx={{ 
                        backgroundColor: '#f4f2f5',
                        color: '#2e5559',
                        '&:hover': {
                          backgroundColor: '#c5c0a7'
                        }
                      }}
                    >
                      Dersi Ekle
                    </Button>
                  </Grid>
                </>
              )}
            </Grid>
            
            {Object.keys(subjectData).length > 0 && (
              <Box sx={{ mt: 4 }}>
                <Typography 
                  variant="h6" 
                  gutterBottom 
                  sx={{ 
                    color: '#f4f2f5', 
                    fontWeight: 'bold',
                    display: 'flex',
                    alignItems: 'center',
                    mb: 2
                  }}
                >
                  <SchoolIcon sx={{ mr: 1, color: '#f4f2f5' }} /> Eklenen Dersler
                </Typography>
                <TableContainer component={Paper} sx={{ borderRadius: '8px', overflow: 'hidden', border: '1px solid #ddd' }}>
                  <Table>
                    <TableHead>
                      <TableRow>
                        <TableCell 
                          sx={{ 
                            backgroundColor: '#333333', 
                            color: '#ffffff', 
                            fontWeight: 'bold', 
                            fontSize: '1rem',
                            padding: '12px 16px'
                          }}
                        >
                          Ders
                        </TableCell>
                        <TableCell 
                          align="center" 
                          sx={{ 
                            backgroundColor: '#2ecc71', 
                            color: '#000000', 
                            fontWeight: 'bold', 
                            fontSize: '1rem',
                            padding: '12px 16px'
                          }}
                        >
                          Doğru
                        </TableCell>
                        <TableCell 
                          align="center" 
                          sx={{ 
                            backgroundColor: '#e74c3c', 
                            color: '#000000', 
                            fontWeight: 'bold', 
                            fontSize: '1rem',
                            padding: '12px 16px'
                          }}
                        >
                          Yanlış
                        </TableCell>
                        <TableCell 
                          align="center" 
                          sx={{ 
                            backgroundColor: '#95a5a6', 
                            color: '#000000', 
                            fontWeight: 'bold', 
                            fontSize: '1rem',
                            padding: '12px 16px'
                          }}
                        >
                          Boş
                        </TableCell>
                        <TableCell 
                          align="center" 
                          sx={{ 
                            backgroundColor: '#3498db', 
                            color: '#000000', 
                            fontWeight: 'bold', 
                            fontSize: '1rem',
                            padding: '12px 16px'
                          }}
                        >
                          Net
                        </TableCell>
                      </TableRow>
                    </TableHead>
                    <TableBody>
                      {Object.entries(subjectData).map(([subject, data], index) => (
                        <TableRow 
                          key={subject}
                          sx={{ 
                            backgroundColor: index % 2 === 0 ? '#f9f4ff' : 'white',
                            '&:hover': { backgroundColor: '#f0e6ff' }
                          }}
                        >
                          <TableCell 
                            component="th" 
                            scope="row"
                            sx={{ 
                              color: '#f4f2f5', 
                              fontWeight: 800,
                              fontSize: '1rem'
                            }}
                          >
                            {subject}
                          </TableCell>
                          <TableCell 
                            align="center"
                            sx={{ 
                              color: '#2ecc71', 
                              fontWeight: 'bold',
                              fontSize: '0.95rem'
                            }}
                          >
                            {data.correctCount}
                          </TableCell>
                          <TableCell 
                            align="center"
                            sx={{ 
                              color: '#e74c3c', 
                              fontWeight: 'bold',
                              fontSize: '0.95rem'
                            }}
                          >
                            {data.incorrectCount}
                          </TableCell>
                          <TableCell 
                            align="center"
                            sx={{ 
                              color: '#7f8c8d', 
                              fontWeight: 'bold',
                              fontSize: '0.95rem'
                            }}
                          >
                            {data.emptyCount}
                          </TableCell>
                          <TableCell 
                            align="center"
                            sx={{ 
                              color: '#f4f2f5', 
                              fontWeight: 'bold',
                              fontSize: '1rem',
                              backgroundColor: 'rgba(44, 62, 80, 0.8)',
                              borderRadius: '4px'
                            }}
                          >
                            {data.net}
                          </TableCell>
                        </TableRow>
                      ))}
                    </TableBody>
                  </Table>
                </TableContainer>
              </Box>
            )}
          </Box>
        );
      case 4:
        return (
          <Box sx={{ p: 3 }}>
            <Typography 
              variant="h5" 
              gutterBottom 
              sx={{ 
                color: '#f4f2f5', 
                fontWeight: 'bold',
                textAlign: 'center',
                mb: 3,
                borderBottom: '2px solid #d9d4bb',
                paddingBottom: '10px'
              }}
            >
              Deneme Bilgileri Özeti
            </Typography>
            
            <Grid container spacing={3}>
              {/* Deneme bilgileri kartları */}
              <Grid gridColumn={{xs: "span 12", md: "span 4"}}>
                <Paper 
                  elevation={3} 
                  sx={{ 
                    p: 2, 
                    borderRadius: '12px',
                    backgroundColor: '#f0f8ff',
                    height: '100%',
                    borderLeft: '4px solid #3498db'
                  }}
                >
                  <Typography variant="subtitle1" sx={{ color: '#f4f2f5', fontWeight: 'bold', mb: 1 }}>
                    Deneme Adı
                  </Typography>
                  <Typography variant="body1" sx={{ color: '#f4f2f5', fontSize: '1.1rem' }}>
                    {examName || 'Belirtilmemiş'}
                  </Typography>
                </Paper>
              </Grid>
              
              <Grid gridColumn={{xs: "span 12", md: "span 4"}}>
                <Paper 
                  elevation={3} 
                  sx={{ 
                    p: 2, 
                    borderRadius: '12px',
                    backgroundColor: '#fff8f0',
                    height: '100%',
                    borderLeft: '4px solid #e67e22'
                  }}
                >
                  <Typography variant="subtitle1" sx={{ color: '#e67e22', fontWeight: 'bold', mb: 1 }}>
                    Tarih
                  </Typography>
                  <Typography variant="body1" sx={{ color: '#f4f2f5', fontSize: '1.1rem' }}>
                    {format(examDate, 'dd MMMM yyyy', { locale: trLocale })}
                  </Typography>
                </Paper>
              </Grid>
              
              <Grid gridColumn={{xs: "span 12", md: "span 4"}}>
                <Paper 
                  elevation={3} 
                  sx={{ 
                    p: 2, 
                    borderRadius: '12px',
                    backgroundColor: '#f0fff8',
                    height: '100%',
                    borderLeft: '4px solid #2ecc71'
                  }}
                >
                  <Typography variant="subtitle1" sx={{ color: '#2ecc71', fontWeight: 'bold', mb: 1 }}>
                    Sınav Türü
                  </Typography>
                  <Typography variant="body1" sx={{ color: '#f4f2f5', fontSize: '1.1rem' }}>
                    {examType}
                  </Typography>
                </Paper>
              </Grid>
              
              {/* Dersler tablosu */}
              <Grid gridColumn="span 12" sx={{ mt: 2 }}>
                <Paper 
                  elevation={3} 
                  sx={{ 
                    p: 2, 
                    borderRadius: '12px',
                    backgroundColor: '#ffffff',
                    borderTop: '4px solid #9b59b6'
                  }}
                >
                  <Typography 
                    variant="h6" 
                    sx={{ 
                      color: '#9b59b6', 
                      fontWeight: 'bold', 
                      mb: 2,
                      display: 'flex',
                      alignItems: 'center'
                    }}
                  >
                    <SchoolIcon sx={{ mr: 1 }} /> Dersler ve Sonuçlar
                  </Typography>
                  
                  <TableContainer sx={{ borderRadius: '8px', overflow: 'hidden', border: '1px solid #ddd' }}>
                    <Table>
                      <TableHead>
                        <TableRow>
                          <TableCell 
                            sx={{ 
                              backgroundColor: '#333333', 
                              color: '#ffffff', 
                              fontWeight: 'bold', 
                              fontSize: '1rem',
                              padding: '12px 16px'
                            }}
                          >
                            Ders
                          </TableCell>
                          <TableCell 
                            align="center" 
                            sx={{ 
                              backgroundColor: '#2ecc71', 
                              color: '#000000', 
                              fontWeight: 'bold', 
                              fontSize: '1rem',
                              padding: '12px 16px'
                            }}
                          >
                            Doğru
                          </TableCell>
                          <TableCell 
                            align="center" 
                            sx={{ 
                              backgroundColor: '#e74c3c', 
                              color: '#000000', 
                              fontWeight: 'bold', 
                              fontSize: '1rem',
                              padding: '12px 16px'
                            }}
                          >
                            Yanlış
                          </TableCell>
                          <TableCell 
                            align="center" 
                            sx={{ 
                              backgroundColor: '#95a5a6', 
                              color: '#000000', 
                              fontWeight: 'bold', 
                              fontSize: '1rem',
                              padding: '12px 16px'
                            }}
                          >
                            Boş
                          </TableCell>
                          <TableCell 
                            align="center" 
                            sx={{ 
                              backgroundColor: '#3498db', 
                              color: '#000000', 
                              fontWeight: 'bold', 
                              fontSize: '1rem',
                              padding: '12px 16px'
                            }}
                          >
                            Net
                          </TableCell>
                        </TableRow>
                      </TableHead>
                      <TableBody>
                        {Object.entries(subjectData).map(([subject, data], index) => (
                          <TableRow 
                            key={subject}
                            sx={{ 
                              backgroundColor: index % 2 === 0 ? '#f9f4ff' : 'white',
                              '&:hover': { backgroundColor: '#f0e6ff' }
                            }}
                          >
                            <TableCell 
                              component="th" 
                              scope="row"
                              sx={{ 
                                color: '#f4f2f5', 
                                fontWeight: 800,
                                fontSize: '1rem'
                              }}
                            >
                              {subject}
                            </TableCell>
                            <TableCell 
                              align="center"
                              sx={{ 
                                color: '#2ecc71', 
                                fontWeight: 'bold',
                                fontSize: '0.95rem'
                              }}
                            >
                              {data.correctCount}
                            </TableCell>
                            <TableCell 
                              align="center"
                              sx={{ 
                                color: '#e74c3c', 
                                fontWeight: 'bold',
                                fontSize: '0.95rem'
                              }}
                            >
                              {data.incorrectCount}
                            </TableCell>
                            <TableCell 
                              align="center"
                              sx={{ 
                                color: '#7f8c8d', 
                                fontWeight: 'bold',
                                fontSize: '0.95rem'
                              }}
                            >
                              {data.emptyCount}
                            </TableCell>
                            <TableCell 
                              align="center"
                              sx={{ 
                                color: '#3498db', 
                                fontWeight: 'bold',
                                fontSize: '1rem',
                                backgroundColor: '#ebf5fb',
                                borderRadius: '4px'
                              }}
                            >
                              {data.net}
                            </TableCell>
                          </TableRow>
                        ))}
                      </TableBody>
                    </Table>
                  </TableContainer>
                </Paper>
              </Grid>
            </Grid>
          </Box>
        );
      default:
        return 'Unknown step';
    }
  };
  
  // Prepare data for progress chart
  const prepareChartData = useCallback((subject) => {
    if (!subject || netRecords.length === 0) return [];
    
    // Filter records for the selected subject
    const subjectRecords = netRecords.filter(record => record.subject === subject);
    
    // Sort by date
    subjectRecords.sort((a, b) => {
      const dateA = a.examDate?.toDate?.() || new Date(0);
      const dateB = b.examDate?.toDate?.() || new Date(0);
      return dateA - dateB;
    });
    
    // Create chart data
    return subjectRecords.map(record => ({
      name: record.examName,
      date: record.examDate?.toDate ? format(record.examDate.toDate(), 'dd/MM/yyyy') : '',
      net: parseFloat(record.net) || 0
    }));
  }, [netRecords]);
  
  // Handle exam type change
  const handleExamTypeChange = (type) => {
    setSelectedExamType(type);
    setSelectedSubject('');
  };
  
  // Handle subject selection
  const handleSubjectSelection = (subject) => {
    setSelectedSubject(subject);
  };
  
  // Render progress chart
  const renderProgressChart = () => {
    const chartData = prepareChartData(selectedSubject);
    
    if (chartData.length === 0) {
      return (
        <Box sx={{ p: 3, textAlign: 'center' }}>
          <Typography variant="body1" sx={{ color: '#f4f2f5' }}>
            Seçilen derse ait veri bulunmamaktadır.
          </Typography>
        </Box>
      );
    }
    
    return (
      <Box sx={{ width: '100%', height: 300, mt: 3 }}>
        <ResponsiveContainer width="100%" height="100%">
          <LineChart data={chartData}>
            <CartesianGrid strokeDasharray="3 3" />
            <XAxis dataKey="date" />
            <YAxis />
            <Tooltip />
            <Legend />
            <Line 
              type="monotone" 
              dataKey="net" 
              stroke="#f4f2f5" 
              activeDot={{ r: 8 }} 
              name="Net Puan"
            />
          </LineChart>
        </ResponsiveContainer>
      </Box>
    );
  };
  
  // Render the list of saved records
  const renderRecordsList = () => {
    if (netRecords.length === 0) {
      return (
        <Box sx={{ p: 3, textAlign: 'center' }}>
          <Typography variant="body1" sx={{ color: '#f4f2f5' }}>
            Henüz kaydedilmiş deneme sonucu bulunmamaktadır.
          </Typography>
        </Box>
      );
    }
    
    // Get subjects based on selected exam type
    const subjects = selectedExamType === 'TYT' ? tytSubjects : aytSubjects;
    
    // Filter records by exam type
    const filteredRecords = netRecords.filter(record => {
      return record.subject.startsWith(selectedExamType);
    });
    
    // Group records by subject
    const subjectRecords = {};
    subjects.forEach(subject => {
      subjectRecords[subject] = filteredRecords.filter(record => record.subject === subject);
    });
    
    return (
      <Box sx={{ mt: 3 }}>
        <Box sx={{ display: 'flex', justifyContent: 'center', mb: 3 }}>
          <Button 
            variant={selectedExamType === 'TYT' ? 'contained' : 'outlined'}
            onClick={() => handleExamTypeChange('TYT')}
            sx={{ 
              mr: 2,
              ...(selectedExamType === 'TYT' 
                ? {
                    backgroundColor: '#d9d4bb',
                    color: '#f4f2f5',
                    '&:hover': {
                      backgroundColor: '#c5c0a7'
                    }
                  } 
                : {
                    color: '#d9d4bb',
                    borderColor: '#d9d4bb',
                    '&:hover': {
                      borderColor: '#c5c0a7',
                      backgroundColor: 'rgba(217, 212, 187, 0.04)'
                    }
                  }
              )
            }}
          >
            TYT
          </Button>
          <Button 
            variant={selectedExamType === 'AYT' ? 'contained' : 'outlined'}
            onClick={() => handleExamTypeChange('AYT')}
            sx={{ 
              ...(selectedExamType === 'AYT' 
                ? {
                    backgroundColor: '#d9d4bb',
                    color: '#f4f2f5',
                    '&:hover': {
                      backgroundColor: '#c5c0a7'
                    }
                  } 
                : {
                    color: '#d9d4bb',
                    borderColor: '#d9d4bb',
                    '&:hover': {
                      borderColor: '#c5c0a7',
                      backgroundColor: 'rgba(217, 212, 187, 0.04)'
                    }
                  }
              )
            }}
          >
            AYT
          </Button>
        </Box>
        
        <Grid container spacing={2}>
          {subjects.map(subject => {
            const records = subjectRecords[subject] || [];
            const latestRecord = records.length > 0 ? 
              records.sort((a, b) => {
                const dateA = a.examDate?.toDate?.() || new Date(0);
                const dateB = b.examDate?.toDate?.() || new Date(0);
                return dateB - dateA; // Descending order
              })[0] : null;
            
            return (
              <Grid gridColumn={{xs: "span 12", sm: "span 6", md: "span 4"}} key={subject}>
                <StyledCard 
                  sx={{ 
                    cursor: 'pointer',
                    border: selectedSubject === subject ? '2px solid #d9d4bb' : 'none',
                    transform: selectedSubject === subject ? 'scale(1.02)' : 'none'
                  }}
                  onClick={() => handleSubjectSelection(subject)}
                >
                  <CardContent>
                    <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'flex-start' }}>
                      <Typography variant="h6" gutterBottom sx={{ color: '#f4f2f5' }}>{subject}</Typography>
                      {latestRecord && (
                        <IconButton 
                          size="small" 
                          color="error"
                          onClick={(e) => {
                            e.stopPropagation();
                            handleRecordDelete(latestRecord.id);
                          }}
                        >
                          <DeleteIcon fontSize="small" />
                        </IconButton>
                      )}
                    </Box>
                    {latestRecord ? (
                      <>
                        <Typography variant="body2" sx={{ color: '#f4f2f5' }}>
                          Son Deneme: {latestRecord.examName}
                        </Typography>
                        <Typography variant="body2" sx={{ color: '#f4f2f5' }}>
                          Tarih: {latestRecord.examDate?.toDate ? 
                            format(latestRecord.examDate.toDate(), 'dd MMMM yyyy', { locale: trLocale }) : ''}
                        </Typography>
                        <Box sx={{ display: 'flex', justifyContent: 'space-between', mt: 2 }}>
                          <Typography variant="body2" sx={{ color: '#f4f2f5' }}>
                            D: {latestRecord.correctCount}
                          </Typography>
                          <Typography variant="body2" sx={{ color: '#f4f2f5' }}>
                            Y: {latestRecord.incorrectCount}
                          </Typography>
                          <Typography variant="body2" sx={{ color: '#f4f2f5' }}>
                            B: {latestRecord.emptyCount}
                          </Typography>
                        </Box>
                        <Box sx={{ mt: 1 }}>
                          <Typography variant="body1" sx={{ fontWeight: 'bold', color: '#f4f2f5' }}>
                            Net: {latestRecord.net}
                          </Typography>
                        </Box>
                      </>
                    ) : (
                      <Typography variant="body2" sx={{ color: '#f4f2f5' }}>
                        Henüz kayıt bulunmamaktadır.
                      </Typography>
                    )}
                  </CardContent>
                </StyledCard>
              </Grid>
            );
          })}
        </Grid>
        
        {selectedSubject && renderProgressChart()}
      </Box>
    );
  };
  
  // Toggle between form and records view
  const toggleViewMode = () => {
    setViewMode(viewMode === 'form' ? 'records' : 'form');
  };
  
  // Handle record deletion with confirmation
  const handleRecordDelete = (id) => {
    if (window.confirm('Bu kaydı silmek istediğinize emin misiniz?')) {
      handleDelete(id);
    }
  };
  
  return (
    <motion.div
      initial={{ opacity: 0 }}
      animate={{ opacity: 1 }}
      transition={{ duration: 0.5 }}
    >
      <Container maxWidth="lg" sx={{ py: isMobile ? 2 : 4 }}>
        <Box className="modern-card" sx={{ p: isMobile ? 2 : 4, mb: 4 }}>
          {loading && (
            <Box
              sx={{
                position: 'fixed',
                top: 0,
                left: 0,
                right: 0,
                bottom: 0,
                display: 'flex',
                alignItems: 'center',
                justifyContent: 'center',
                backgroundColor: 'rgba(255, 255, 255, 0.7)',
                zIndex: 1000,
              }}
            >
              <CircularProgress />
            </Box>
          )}
          
          <Typography 
            variant={isMobile ? "h5" : "h4"} 
            gutterBottom 
            sx={{ 
              color: 'var(--primary-color)',
              fontWeight: 700,
              textAlign: 'center',
              mb: 3,
              display: 'flex',
              alignItems: 'center',
              justifyContent: 'center',
              gap: 1
            }}
          >
            <SchoolIcon /> TYT/AYT Net Takibi
          </Typography>
          
          <Divider sx={{ mb: 3 }} />
          
          <Box sx={{ display: 'flex', justifyContent: 'flex-end', mb: 3 }}>
            <Button
              className="modern-button modern-button-primary"
              onClick={toggleViewMode}
              startIcon={viewMode === 'form' ? <ViewListIcon /> : <AddIcon />}
            >
              {viewMode === 'form' ? 'Kayıtları Görüntüle' : 'Yeni Deneme Ekle'}
            </Button>
          </Box>
          
          {viewMode === 'form' ? (
            /* Form view */
            <Box>
              <ModernStepper activeStep={activeStep} />
              
              <Box sx={{ mt: 4 }}>
                {activeStep === steps.length ? (
                  /* Form submitted successfully */
                  <Box sx={{ textAlign: 'center', py: 4 }}>
                    <CheckCircleIcon sx={{ fontSize: 60, color: 'var(--success)', mb: 2 }} />
                    <Typography variant="h5" gutterBottom sx={{ color: 'var(--text-primary)', fontWeight: 600 }}>
                      Deneme sonuçlarınız başarıyla kaydedildi!
                    </Typography>
                    <Button
                      className="modern-button modern-button-primary"
                      onClick={() => setActiveStep(0)}
                      sx={{ mt: 3 }}
                    >
                      Yeni Deneme Ekle
                    </Button>
                  </Box>
                ) : (
                  /* Form steps */
                  <>
                    <Box className="modern-card" sx={{ p: 3, mb: 4 }}>
                      {getStepContent(activeStep)}
                    </Box>
                    
                    <Box sx={{ 
                      display: 'flex', 
                      justifyContent: 'space-between', 
                      mt: 4,
                      flexDirection: isMobile ? 'column' : 'row',
                      gap: isMobile ? 2 : 0
                    }}>
                      <Button
                        className={`modern-button ${activeStep === 0 ? '' : 'modern-button-secondary'}`}
                        disabled={activeStep === 0}
                        onClick={handleBack}
                        startIcon={<NavigateBeforeIcon />}
                        sx={{ 
                          opacity: activeStep === 0 ? 0.5 : 1,
                          order: isMobile ? 2 : 1,
                          width: isMobile ? '100%' : 'auto'
                        }}
                      >
                        Geri
                      </Button>
                      
                      <Button
                        className="modern-button modern-button-primary"
                        onClick={handleNext}
                        endIcon={<NavigateNextIcon />}
                        disabled={activeStep === 3 && Object.keys(subjectData).length === 0}
                        sx={{ 
                          order: isMobile ? 1 : 2,
                          width: isMobile ? '100%' : 'auto'
                        }}
                      >
                        {activeStep === steps.length - 1 ? 'Bitir' : 'İleri'}
                      </Button>
                    </Box>
                  </>
                )}
              </Box>
            </Box>
          ) : (
            /* Records view */
            <Box>
              <Box className="modern-card" sx={{ p: 3, mb: 4 }}>
                <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 3 }}>
                  <Typography variant="h5" sx={{ color: 'var(--primary-color)', fontWeight: 600 }}>
                    Deneme Sonuçları
                  </Typography>
                  <Button
                    className="modern-button modern-button-outline"
                    startIcon={<BarChartIcon />}
                    onClick={() => {}}
                  >
                    Grafik Görünümü
                  </Button>
                </Box>
                {renderRecordsList()}
              </Box>
            </Box>
          )}
          
          {/* Notification */}
          <Snackbar 
            open={notification.open} 
            autoHideDuration={6000} 
            onClose={handleCloseNotification}
            anchorOrigin={{ vertical: 'bottom', horizontal: 'center' }}
          >
            <Alert 
              onClose={handleCloseNotification} 
              severity={notification.severity} 
              sx={{ width: '100%' }}
            >
              {notification.message}
            </Alert>
          </Snackbar>
        </Box>
      </Container>
    </motion.div>
  );
};

export default TytAytNetTakibi;
